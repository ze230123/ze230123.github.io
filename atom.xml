<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泽i blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-12T08:49:07.925Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>泽i</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>制作一个类似游标卡尺的视图</title>
    <link href="http://yoursite.com/2018/01/12/rulerView/"/>
    <id>http://yoursite.com/2018/01/12/rulerView/</id>
    <published>2018-01-12T04:18:25.000Z</published>
    <updated>2018-01-12T08:49:07.925Z</updated>
    
    <content type="html"><![CDATA[<p>项目需要用到类似游标卡尺的控件来选择金额，效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2018/ruler/ruler.gif" alt="效果图" title="">                </div>                <div class="image-caption">效果图</div>            </figure><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol><li>控件有一个卡尺刻度的视图，可以左右滑动，选中的刻度始终位于控件的x轴中心。</li><li>卡尺刻度在0、5的倍数位置的刻度为长线，其余为短线，可以设置最大的刻度、每格等于的值。</li><li>控件的x轴中心有一条竖线，表示当前选中的刻度。</li><li>刻度的上方有一个label实时显示当前处于x轴中心线位置的刻度所代表的数值。</li></ol><p>卡尺刻度选用UICollectionView来实现</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>控件比较有难度的是刻度部分，在此重点说一下刻度的实现，刻度是用UICollectionView实现的，根据最大值计算有多少个Cell，在每个Cellx轴中心画一条竖线，通过layout的sectionInset属性实现0、和最大值的位置处于x轴中心线。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> layout = <span class="type">UICollectionViewFlowLayout</span>()        </div><div class="line"><span class="keyword">let</span> margin = (frame.width - itemWidth) / <span class="number">2</span></div><div class="line">layout.sectionInset = <span class="type">UIEdgeInsets</span>(top: <span class="number">0</span>, <span class="keyword">left</span>: margin, bottom: <span class="number">0</span>, <span class="keyword">right</span>: margin)</div></pre></td></tr></table></figure><p>根据设置的最大值，和每个刻度的值计算Item的数量，并填充Cell的数据</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - UICollectionViewDataSource</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Ruler</span>: <span class="title">UICollectionViewDataSource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, numberOfItemsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> itemCount</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> cell: <span class="type">UICollectionViewCell</span></div><div class="line"><span class="comment">//0和5的倍数是长线的Cell</span></div><div class="line">        <span class="keyword">switch</span> indexPath.item % <span class="number">5</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            cell = collectionView.dequeueReusableCell(withReuseIdentifier: longCellId, <span class="keyword">for</span>: indexPath)</div><div class="line">            (cell <span class="keyword">as</span>? <span class="type">LongLineCell</span>)?.textLabel.text = <span class="string">"\(indexPath.item * textRatio)\(textUnit)"</span></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            cell = collectionView.dequeueReusableCell(withReuseIdentifier: shortCellId, <span class="keyword">for</span>: indexPath)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此时已经实现了刻度，但是此时左右滑动后刻度不会停止在x轴中心线的位置，还需要我们实现delegate的方法去自行设置刻度停止位置</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - UIScrollViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Ruler</span>: <span class="title">UIScrollViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewWillEndDragging</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer&lt;CGPoint&gt;)</span></span> &#123;</div><div class="line">        <span class="comment">// 手指离开屏幕后，CollectionView将要停下的位置，换算成整数确保停留在中间线上</span></div><div class="line">        <span class="keyword">let</span> index = round(targetContentOffset.pointee.x / itemWidth)</div><div class="line">        targetContentOffset.pointee.x = index * itemWidth</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">        <span class="comment">// 实时显示金额</span></div><div class="line">        <span class="keyword">let</span> index = round(scrollView.contentOffset.x / itemWidth)</div><div class="line">        rulerView?.<span class="keyword">set</span>(current: <span class="type">Int</span>(index) * textRatio)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 停下后通知代理当前选中的金额</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDecelerating</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">        delegate?.ruler(<span class="keyword">self</span>, currentPrice: calculatePrice(scrollView))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDragging</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView, willDecelerate decelerate: Bool)</span></span> &#123;</div><div class="line">        <span class="comment">// 如果停在了边界，decelerate为false时通知代理</span></div><div class="line">        <span class="comment">// 此处是处理刻度已经滑动到0或者最大值时不松开手机继续滑动后，当手指松开后不会走上方的代理方法，导致不会发送消息的delegate</span></div><div class="line">        <span class="keyword">guard</span> !decelerate <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        delegate?.ruler(<span class="keyword">self</span>, currentPrice: calculatePrice(scrollView))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 代码滚动</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndScrollingAnimation</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</div><div class="line">        delegate?.ruler(<span class="keyword">self</span>, currentPrice: calculatePrice(scrollView))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其余的实现都很简单就不多写了</p><h3 id="点击获取代码"><a href="#点击获取代码" class="headerlink" title="点击获取代码"></a><a href="https://github.com/ze230123/RulerView" target="_blank" rel="external">点击获取代码</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目需要用到类似游标卡尺的控件来选择金额，效果如下：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;o
      
    
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/categories/swift/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/11/09/nginx/"/>
    <id>http://yoursite.com/2017/11/09/nginx/</id>
    <published>2017-11-09T10:21:07.000Z</published>
    <updated>2017-11-09T10:21:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx 安装</p><p>brew install nginx</p><p>sudo nginx // 启动<br>sudo nginx -s stop/quit/reopen/reload //发送信号给主进程：停止，退出，重新打开，重新加载</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nginx 安装&lt;/p&gt;
&lt;p&gt;brew install nginx&lt;/p&gt;
&lt;p&gt;sudo nginx // 启动&lt;br&gt;sudo nginx -s stop/quit/reopen/reload //发送信号给主进程：停止，退出，重新打开，重新加载&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Idkeyboard-自定义身份证号码键盘</title>
    <link href="http://yoursite.com/2017/10/20/Idkeyboard/"/>
    <id>http://yoursite.com/2017/10/20/Idkeyboard/</id>
    <published>2017-10-20T07:19:30.000Z</published>
    <updated>2017-10-20T09:49:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中需要输入身份证号，系统自带的键盘用来输入很不方便，所以就需要自定做一个带<code>X</code>的数字键盘。</p><p>现在网上有很多都是通过循环创建button，在计算其frame。前几天看到了UIStackView，其可以使多个View按照横向或竖向对齐排列，就用stackView写了一个键盘。</p><p>效果如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/IdKeyboard/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="键盘结构"><a href="#键盘结构" class="headerlink" title="键盘结构"></a>键盘结构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/IdKeyboard/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><ol><li>键盘使用UIInputViewController实现</li><li>所有按键都是一个button，竖排的4个button放到一个竖向排列stackView中。</li><li>划分好的4个stackView放到一个横向排列的stackView中。</li><li>将横向stackView添加到inputView</li></ol></blockquote><h2 id="IdKeyBoard"><a href="#IdKeyBoard" class="headerlink" title="IdKeyBoard"></a><a href="https://github.com/ze230123/IdKeyboard.git" target="_blank" rel="external">IdKeyBoard</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目中需要输入身份证号，系统自带的键盘用来输入很不方便，所以就需要自定做一个带&lt;code&gt;X&lt;/code&gt;的数字键盘。&lt;/p&gt;
&lt;p&gt;现在网上有很多都是通过循环创建button，在计算其frame。前几天看到了UIStackView，其可以使多个View按照横向或竖向对齐排
      
    
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/categories/swift/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>常用手机号、身份证号码、银行卡验证</title>
    <link href="http://yoursite.com/2017/08/18/verification/"/>
    <id>http://yoursite.com/2017/08/18/verification/</id>
    <published>2017-08-18T12:00:00.000Z</published>
    <updated>2017-10-20T05:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line"><span class="keyword">var</span> isPhoneNumber: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> pattern = <span class="string">"^1+[3578]+\\d&#123;9&#125;"</span></div><div class="line">        <span class="keyword">let</span> pred = <span class="type">NSPredicate</span>(format: <span class="string">"SELF MATCHES %@"</span>, pattern)</div><div class="line">        <span class="keyword">return</span> pred.evaluate(with: <span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="身份证号码有效性判断（18位二代身份证）"><a href="#身份证号码有效性判断（18位二代身份证）" class="headerlink" title="身份证号码有效性判断（18位二代身份证）"></a>身份证号码有效性判断（18位二代身份证）</h2><h3 id="身份证号码结构"><a href="#身份证号码结构" class="headerlink" title="身份证号码结构"></a>身份证号码结构</h3><p>早期‘身份证号码’叫‘社会保障号’，为15位，1999年开始更名为公民身份证号码，即第二代身份证，为18位，且终身不变。</p><blockquote><pre><code>430512  19890813  136  7</code></pre></blockquote><p>公民身份号码是特征组合码，由前十七位数字本体码和最后一位数字校验码组成。排列顺序从左至右依次为六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。</p><p><strong>地址码</strong>： 表示编码对象常住户口所在县(市、旗、区)的行政区划代码。对于新生儿，该地址码为户口登记地行政区划代码。需要没说明的是，随着行政区划的调整，同一个地方进行户口登记的可能存在地址码不一致的情况。行政区划代码按GB/T2260的规定执行。</p><p><strong>出生日期码</strong>：表示编码对象出生的年、月、日，年、月、日代码之间不用分隔符，格式为YYYYMMDD，如19880328。按GB/T 7408的规定执行。</p><p><strong>顺序码</strong>： 表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。</p><p><strong>校验码</strong>： 根据本体码，通过采用ISO 7064:1983,MOD 11-2校验码系统计算出校验码。算法可参考下文。前面有提到数字校验码，我们知道校验码也有X的，实质上为罗马字符X，相当于10.</p><h3 id="校验码算法"><a href="#校验码算法" class="headerlink" title="校验码算法"></a>校验码算法</h3><hr><ol><li><p>十七位数字本体码加权求和公式</p><p> <strong>S = Sum(Ai * Wi), i = 0, … , 16 ，先对前17位数字的权求和</strong></p><p> <strong>Ai:表示第i位置上的身份证号码数字值</strong></p><p> <strong>Wi:表示第i位置上的加权因子</strong></p><p> <strong>Wi:</strong>  <code>7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2</code></p></li><li><p>计算模</p><p> <strong>Y = mod(S, 11)</strong></p></li><li><p>通过模得到对应的校验码</p><p> <strong>Y: <code>0 1 2 3 4 5 6 7 8 9 10</code></strong></p><p> <strong>校验码: <code>1 0 X 9 8 7 6 5 4 3 2</code></strong></p></li></ol><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><blockquote><p>本体码为：11010519491231002</p><p>第一步： 各位数与对应加权因子乘积求和1<em>7+1</em>9+0<em>10+1</em>5+<em>*</em>=167</p><p>第二步：计算模167%11=2</p><p>第三步：根据余数2对照校验码得X</p><p>因此完整身份证号为：11010519491231002X</p></blockquote><h3 id="swift代码"><a href="#swift代码" class="headerlink" title="swift代码"></a>swift代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isIdCard: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">self</span>.characters.<span class="built_in">count</span> == <span class="number">18</span> <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 判断身份证号码格式</span></div><div class="line">        <span class="keyword">let</span> pattern = <span class="string">"^(^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d&#123;4&#125;)|\\d&#123;3&#125;[Xx])$)$"</span></div><div class="line">        <span class="keyword">let</span> pred = <span class="type">NSPredicate</span>(format: <span class="string">"SELF MATCHES %@"</span>, pattern)</div><div class="line"></div><div class="line">        <span class="keyword">guard</span> pred.evaluate(with: <span class="keyword">self</span>) <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">  <span class="comment">// 计算校验码</span></div><div class="line">        <span class="keyword">let</span> strArr = <span class="type">Array</span>(<span class="keyword">self</span>.characters.<span class="built_in">dropLast</span>(<span class="number">1</span>)).flatMap &#123; <span class="type">Int</span>(<span class="type">String</span>($<span class="number">0</span>)) &#125;</div><div class="line">        <span class="keyword">let</span> sum = strArr.enumerated().<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + wi[$<span class="number">1</span>.offset] * $<span class="number">1</span>.element &#125;</div><div class="line">        <span class="keyword">let</span> lastStr = <span class="type">String</span>(<span class="keyword">self</span>.characters.last!)</div><div class="line">        <span class="keyword">guard</span> lastStr.lowercased() == checksumMap[sum % <span class="number">11</span>].lowercased() <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="银行卡有效性判断"><a href="#银行卡有效性判断" class="headerlink" title="银行卡有效性判断"></a>银行卡有效性判断</h2><h3 id="银行卡结构"><a href="#银行卡结构" class="headerlink" title="银行卡结构"></a>银行卡结构</h3><blockquote><p>   XXXXXX          XXXXXXXXXXXX          X</p><p>   发卡行标识代码          自定义位              校验码</p></blockquote><p>根据ISO标准，银行卡长度一般在13-19位，国际上也有12位的。银联标准卡卡长度一般是在16-19位，双组织卡也有13-19位的。<strong>校验码为银行卡号最后一位，采用LUHN算法，亦称模10算法。</strong></p><h3 id="luhn算法"><a href="#luhn算法" class="headerlink" title="luhn算法"></a>luhn算法</h3><ol><li>反方向排列后，从右往左，奇数位乘以2；</li><li>清理两位数字：如果乘以2得到的数字是两位，即大于等于10，就把两位数字的个位十位相加得到一位数字；</li><li>相加模 10：清理后的所有数字相加，以10取模后，用10相减即得到效验数字</li></ol><h3 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h3><blockquote><p>   卡号：<code>5204 4080 8656 6492</code></p></blockquote><ol><li><p>反方向排列后，从右往左，奇数位乘以2；<br> 先把最后一位数字<code>2</code>保留，作为校验码，然后把所有数字反向排列：</p><blockquote><pre><code>9 4 6 6 5 6 8 0 8 0 4 4 0 2 5</code></pre><p> 再把所有奇数为[9, 6, 5, 8, 8, 4, 0, 5]乘以2</p><p>   18 4 12 6 10 6 16 0 16 0 8 4 0 2 10</p></blockquote></li><li><p>清理两位数字：如果乘以2得到的数字是两位，即大于等于10，就把两位数字的个位十位相加得到一位数字；<br> 两位的数字减去9得到的数字，即为该数字个位十位相加后的数字</p><blockquote><p>   9 4 3 6 1 6 7 0 7 0 8 4 0 2 1</p></blockquote><p> 所有的数字相加：</p><blockquote><p>   9+4+3+6+1+6+7+0+7+0+8+4+0+2+1 = 58</p></blockquote></li><li><p>相加模 10<br> 最后把计算出的数值加上校验码<code>2</code> 58+2=60</p><p> 如果计算结果可以被10整除，则该卡号为有效的银行卡号</p></li></ol><h3 id="Swift代码"><a href="#Swift代码" class="headerlink" title="Swift代码"></a>Swift代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line"><span class="keyword">var</span> isBankCard: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> arr = <span class="type">Array</span>(<span class="keyword">self</span>.characters.reversed()).flatMap &#123; <span class="type">Int</span>(<span class="type">String</span>($<span class="number">0</span>)) &#125;</div><div class="line">        <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> (i, element) <span class="keyword">in</span> arr.enumerated() &#123;</div><div class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</div><div class="line">                sum += element</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> res = element * <span class="number">2</span></div><div class="line">                <span class="keyword">if</span> res &gt;= <span class="number">10</span> &#123;</div><div class="line">                    res -= <span class="number">9</span></div><div class="line">                &#125;</div><div class="line">                sum += res</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum % <span class="number">10</span> == <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;手机号&quot;&gt;&lt;a href=&quot;#手机号&quot; class=&quot;headerlink&quot; title=&quot;手机号&quot;&gt;&lt;/a&gt;手机号&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d
      
    
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/categories/swift/"/>
    
    
      <category term="常用代码" scheme="http://yoursite.com/tags/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ZEDownloadManager 下载管理器</title>
    <link href="http://yoursite.com/2017/03/02/downloadManager/"/>
    <id>http://yoursite.com/2017/03/02/downloadManager/</id>
    <published>2017-03-02T14:00:00.000Z</published>
    <updated>2017-10-20T05:19:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h3><ol><li>ZEDownloadModel是下载任务的数据模型，下载任务的文件名、储存路径、下载进度、下载速度等。进度、状态的回调。</li><li>ZEDownloadOperation是NSOperation的子类，下载功能的实现、暂停等功能。</li><li>ZEDownloadManager单例，将上面俩个类集成，用户通过ZEDownloadManager对象的操作实现下载。</li></ol><h3 id="ZEDownloadModel"><a href="#ZEDownloadModel" class="headerlink" title="ZEDownloadModel"></a>ZEDownloadModel</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">ZEDownloadModel</span>;</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, ZEDownloadState) &#123;</div><div class="line">    ZEDownloadStateNone = <span class="number">0</span>,       <span class="comment">// 初始状态</span></div><div class="line">    ZEDownloadStateRunning = <span class="number">1</span>,    <span class="comment">// 下载中</span></div><div class="line">    ZEDownloadStateSuspended = <span class="number">2</span>,  <span class="comment">// 下载暂停</span></div><div class="line">    ZEDownloadStateCompleted = <span class="number">3</span>,  <span class="comment">// 下载完成</span></div><div class="line">    ZEDownloadStateFailed  = <span class="number">4</span>,    <span class="comment">// 下载失败</span></div><div class="line">    ZEDownloadStateWaiting = <span class="number">5</span>    <span class="comment">// 等待下载</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^ZEProgressChanged)(ZEDownloadModel *model);</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^ZEStateChanged)(ZEDownloadModel *model);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZEDownloadModel</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">/** 标题 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *title;</div><div class="line"><span class="comment">/** 下载链接 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *downloadUrl;</div><div class="line"><span class="comment">/** 下载速度 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *speedString;</div><div class="line"><span class="comment">/** 下载大小 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *currentSize;</div><div class="line"><span class="comment">/** 总大小 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *totalSize;</div><div class="line"><span class="comment">/** 文件地址 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *localPath;</div><div class="line"><span class="comment">/** 下载编号 用于排序 添加到下载管理器之前设置 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> downloadNum;</div><div class="line"><span class="comment">/** 下载进度 0.0 ~ 1.0 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">double</span> progress;</div><div class="line"><span class="comment">/** 下载状态 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) ZEDownloadState state;</div><div class="line"><span class="comment">/** 1s 前下载大小  */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) int64_t bytesWritten;</div><div class="line"><span class="comment">/** 下载进度数据 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSData</span> *resumeData;</div><div class="line"><span class="comment">/** 用于计算下载速度的时间 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDate</span> *date;</div><div class="line"><span class="comment">/** 下载按钮的title 可选设置 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *stateString;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) ZEProgressChanged progressChanged;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) ZEStateChanged stateChanged;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWtihTitle:(<span class="built_in">NSString</span>*)title url:(<span class="built_in">NSString</span>*)url;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><ol><li>bytesWritten 和 date 是用于 间隔1秒计算一次下载大小和下载速度用的 </li><li>downloadNum属性是任务的下载顺序，我设定的是始终优先下载最早加入的任务，效果如下<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2017/03/download.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><p>使用progressChanged和stateChanged Block实时刷新UI 其中是在progress和state的setter方法中调用 state的setter方法中设置提示信息和速度</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setProgress:(<span class="keyword">double</span>)progress &#123;</div><div class="line">    _progress = progress;</div><div class="line">    <span class="keyword">if</span> (_progressChanged) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            _progressChanged(<span class="keyword">self</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)setState:(ZEDownloadState)state &#123;</div><div class="line">    _state = state;</div><div class="line">    <span class="keyword">switch</span> (state) &#123;</div><div class="line">        <span class="keyword">case</span> ZEDownloadStateNone: &#123;</div><div class="line">            <span class="keyword">self</span>.stateString = <span class="string">@"开始下载"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> ZEDownloadStateRunning: &#123;</div><div class="line">            <span class="keyword">self</span>.stateString = <span class="string">@"暂停"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> ZEDownloadStateCompleted: &#123;</div><div class="line">            <span class="keyword">self</span>.stateString = <span class="string">@"完成"</span>;</div><div class="line">            <span class="keyword">self</span>.speedString = <span class="string">@""</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> ZEDownloadStateWaiting: &#123;</div><div class="line">            <span class="keyword">self</span>.stateString = <span class="string">@"等待"</span>;</div><div class="line">            <span class="keyword">self</span>.speedString = <span class="string">@""</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> ZEDownloadStateSuspended: &#123;</div><div class="line">            <span class="keyword">self</span>.stateString = <span class="string">@"继续"</span>;</div><div class="line">            <span class="keyword">self</span>.speedString = <span class="string">@""</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> ZEDownloadStateFailed: &#123;</div><div class="line">            <span class="keyword">self</span>.stateString = <span class="string">@"重新开始"</span>;</div><div class="line">            <span class="keyword">self</span>.speedString = <span class="string">@"下载失败"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (_stateChanged) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            _stateChanged(<span class="keyword">self</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ZEDownloadOperation"><a href="#ZEDownloadOperation" class="headerlink" title="ZEDownloadOperation"></a>ZEDownloadOperation</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSInteger</span>,ZEOperationState) &#123;</div><div class="line">    ZEOperationRuning = <span class="number">0</span>,</div><div class="line">    ZEOperationCancelled = <span class="number">1</span>,</div><div class="line">    ZEOperationComplete = <span class="number">2</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 下载任务 继承NSOperation 使用NSOperationQueue管理</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZEDownloadOperation</span> : <span class="title">NSOperation</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) ZEDownloadModel *model;</div><div class="line"><span class="comment">/** 任务状态 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) ZEOperationState state;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWith:(ZEDownloadModel *)model session:(<span class="built_in">NSURLSession</span> *)session;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 暂停下载</span></div><div class="line"><span class="comment"> */</span></div><div class="line">- (<span class="keyword">void</span>)suspend;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 完成下载</span></div><div class="line"><span class="comment"> */</span></div><div class="line">- (<span class="keyword">void</span>)downloadFinished;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><ol><li>ZEOperationState用于维护isExecuting、isFinished，NSOperationQueue根据这两个属性检测NSOperation的调度。</li><li>下载任务使用的NSURLSession为共享的session。</li></ol><p>ZEDownloadOperation.m的实现</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZEDownloadOperation</span>()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSessionDownloadTask</span> *task;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableURLRequest</span> *request;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSession</span> *session;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ZEDownloadOperation</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark- life cycle</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWith:(ZEDownloadModel *)model session:(<span class="built_in">NSURLSession</span> *)session &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        <span class="keyword">self</span>.model = model;</div><div class="line">        <span class="keyword">self</span>.session = session;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="keyword">self</span>.task = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dealloc %@"</span>,<span class="keyword">self</span>.description);</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)start &#123;</div><div class="line">    <span class="comment">// 创建下载任务  根据 resumeData 创建新任务或续传任务</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.model.resumeData) &#123;</div><div class="line">        <span class="keyword">self</span>.task = [<span class="keyword">self</span>.session downloadTaskWithRequest:<span class="keyword">self</span>.request];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">self</span>.task = [<span class="keyword">self</span>.session downloadTaskWithResumeData:<span class="keyword">self</span>.model.resumeData];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.task.downloadModel = <span class="keyword">self</span>.model;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *  开始任务</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    [<span class="keyword">self</span>.task resume];</div><div class="line">    [<span class="keyword">self</span> updateState:ZEOperationRuning];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark- Public method</span></div><div class="line">- (<span class="keyword">void</span>)suspend &#123;</div><div class="line">    [<span class="keyword">self</span> updateState:ZEOperationCancelled];</div><div class="line">    [<span class="keyword">self</span>.task cancelByProducingResumeData:^(<span class="built_in">NSData</span> * _Nullable resumeData) &#123;</div><div class="line">        <span class="keyword">self</span>.model.resumeData = resumeData;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)downloadFinished &#123;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> updateState:ZEOperationComplete];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark- Private method</span></div><div class="line">- (<span class="keyword">void</span>)updateState:(ZEOperationState)state &#123;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isExecuting"</span>];</div><div class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isFinished"</span>];</div><div class="line">    _state = state;</div><div class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isFinished"</span>];</div><div class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isExecuting"</span>];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark- setter and getter</span></div><div class="line">- (<span class="built_in">NSMutableURLRequest</span> *)request &#123;</div><div class="line">    <span class="keyword">if</span> (_request == <span class="literal">nil</span>) &#123;</div><div class="line">        _request = [[<span class="built_in">NSMutableURLRequest</span> alloc] initWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.model.downloadUrl]</div><div class="line">                                                cachePolicy: <span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span></div><div class="line">                                            timeoutInterval:<span class="number">20</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _request;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)isExecuting &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.state == ZEOperationRuning;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)isFinished &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.state == ZEOperationComplete || <span class="keyword">self</span>.state == ZEOperationCancelled;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><ol><li>重写start方法 开启下载任务，只要在start中判断model.resumeData是否为空，就可以新建下载任务或断点续传。</li><li>updateState:方法更新state的值，并手动通知isExecuting、isFinished的改变。</li><li>任务暂停就是取消下载任务，task调用cancelByProducingResumeData方法并存储resumeData值用以继续下载。</li></ol><h3 id="ZEDownloadManager"><a href="#ZEDownloadManager" class="headerlink" title="ZEDownloadManager"></a>ZEDownloadManager</h3><p>ZEDownloadManager设计为单例,对外接口有存放所有任务的数组，添加任务、暂停任务、判断任务是否在以添加，可以设置最大下载数——默认为1.</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZEDownloadManager</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *_downloadArr;</div><div class="line">    <span class="built_in">NSMutableArray</span> *_completeArr;</div><div class="line">&#125;</div><div class="line"><span class="comment">/** 最大下载数 默认 1 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> maxDownloadCount;</div><div class="line"><span class="comment">/** 所有下载任务 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span> *downloadArr;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span> *completeArr;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 获取单例对象</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> @return 实例对象</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+(<span class="keyword">instancetype</span>)manager;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 添加到下载管理器中 开始或等待下载</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> @param model 数据模型</span></div><div class="line"><span class="comment"> */</span></div><div class="line">- (<span class="keyword">void</span>)addDownLoad:(ZEDownloadModel *)model;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 暂停</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> @param model 数据模型</span></div><div class="line"><span class="comment"> */</span></div><div class="line">- (<span class="keyword">void</span>)suspend:(ZEDownloadModel *)model;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 开始 或 继续</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> @param model 数据模型</span></div><div class="line"><span class="comment"> */</span></div><div class="line">- (<span class="keyword">void</span>)resume:(ZEDownloadModel *)model;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 是否在下载队列中</span></div><div class="line"><span class="comment"> */</span></div><div class="line">- (<span class="built_in">BOOL</span>)isExecuted:(ZEDownloadModel *)model;</div></pre></td></tr></table></figure><p>####ZEDownloadManager.m</p><ul><li>需要的属性</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 共享的session */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSession</span> *session;</div><div class="line"><span class="comment">/** 下载队列 */</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">strong</span>,<span class="keyword">nonatomic</span>) <span class="built_in">NSOperationQueue</span> *downloadQueue;</div><div class="line"><span class="comment">/** 等待队列 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *waitingQueue;</div></pre></td></tr></table></figure><p>正在下载的任务加入到downloadQueue，等待下载的任务加入到waitingQueue中，当downloadQueue中有任务完成时把waitingQueue中第一个任务取出加入到downloadQueue中，并在waitingQueue中删除</p><ul><li>创建共享的NSURLSession</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSURLSession</span> *)session &#123;</div><div class="line">    <span class="keyword">if</span> (_session == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 创建NSURLSessionConfiguration类的对象, 这个对象被用于创建NSURLSession类的对象.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="built_in">NSURLSessionConfiguration</span> *configura = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 2. 创建NSURLSession的对象.</span></div><div class="line"><span class="comment">         * 参数一 : NSURLSessionConfiguration类的对象.(第1步创建的对象.)</span></div><div class="line"><span class="comment">         * 参数二 : session的代理人. 如果为nil, 系统将会提供一个代理人.</span></div><div class="line"><span class="comment">         * 参数三 : 一个队列, 代理方法在这个队列中执行. 如果为nil, 系统会自动创建一系列的队列.</span></div><div class="line"><span class="comment">         * 注: 只能通过这个方法给session设置代理人, 因为在NSURLSession中delegate属性是只读的.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        _session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:configura delegate:<span class="keyword">self</span> delegateQueue:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _session;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>创建NSOperationQueue，管理正在下载的任务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (NSOperationQueue *)downloadQueue &#123;</div><div class="line">    if (_downloadQueue == nil) &#123;</div><div class="line">        _downloadQueue = [[NSOperationQueue alloc]init];</div><div class="line">    &#125;</div><div class="line">    return _downloadQueue;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>添加任务</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addDownLoad:(ZEDownloadModel *)model &#123;</div><div class="line">    [_downloadArr addObject:model];</div><div class="line">    ZEDownloadOperation *operation = [[ZEDownloadOperation alloc]initWith:model session:<span class="keyword">self</span>.session];</div><div class="line">    [<span class="keyword">self</span> addDownArrOrWaitingArr:operation];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>addDownArrOrWaitingArr： 是将任务加入到下载队列或等待队列，</p><ul><li>暂停任务</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)suspend:(ZEDownloadModel *)model&#123;</div><div class="line">    ZEDownloadOperation *operation = [<span class="keyword">self</span> operatonForModel:model];</div><div class="line">    model.state = ZEDownloadStateSuspended;</div><div class="line">    [operation suspend];</div><div class="line">    <span class="comment">//下载队列未达到最大下载数 将operation添加到下载队列 并将自己从等待队列中删除</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.downloadQueue.operations.count &lt; <span class="keyword">self</span>.maxDownloadCount) &#123;</div><div class="line">        [<span class="keyword">self</span> nextDownload];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="keyword">self</span>.waitingQueue containsObject:operation]) &#123; <span class="comment">//下载队列达到最大下载数  将自己从等待队列中删除</span></div><div class="line">        [<span class="keyword">self</span>.waitingQueue removeObject:operation];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果暂停下载中的任务就开始下一个，如果是暂停等待中的任务就在等待队列中删除。</p><ul><li>继续下载</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)resume:(ZEDownloadModel *)model &#123;</div><div class="line">    ZEDownloadOperation *operation = [<span class="keyword">self</span> operatonForModel:model];</div><div class="line">    [<span class="keyword">self</span> addDownArrOrWaitingArr:operation];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同样是调用addDownArrOrWaitingArr：方法，<strong><em>添加到等待队列后，对等待队列按model.downloadNum升序排序。</em></strong></p><ul><li>NSURLSessionDelegate</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark- NSURLSessionDelegate</span></div><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite &#123;</div><div class="line"></div><div class="line">    <span class="built_in">NSDate</span> *currentDate = [<span class="built_in">NSDate</span> date];</div><div class="line">    <span class="built_in">NSTimeInterval</span> interval = [currentDate timeIntervalSinceDate:downloadTask.downloadModel.date];</div><div class="line">    <span class="keyword">if</span> (downloadTask.downloadModel.date == <span class="literal">nil</span> || interval &gt; <span class="number">1</span> || totalBytesWritten == totalBytesExpectedToWrite) &#123;</div><div class="line">        <span class="keyword">double</span> progress = (<span class="keyword">double</span>)totalBytesWritten / totalBytesExpectedToWrite;</div><div class="line">        <span class="built_in">NSString</span> *speedStr = [<span class="built_in">NSByteCountFormatter</span> stringFromByteCount:totalBytesWritten - downloadTask.downloadModel.bytesWritten</div><div class="line">                                                            countStyle:<span class="built_in">NSByteCountFormatterCountStyleMemory</span>];</div><div class="line">        <span class="built_in">NSString</span> *speedString = [speedStr stringByAppendingString:<span class="string">@"/s"</span>];</div><div class="line">        <span class="built_in">NSString</span> *currentSize = [<span class="built_in">NSByteCountFormatter</span> stringFromByteCount:totalBytesWritten</div><div class="line">                                                               countStyle:<span class="built_in">NSByteCountFormatterCountStyleMemory</span>];</div><div class="line">        <span class="built_in">NSString</span> *totalSize = [<span class="built_in">NSByteCountFormatter</span> stringFromByteCount:totalBytesExpectedToWrite</div><div class="line">                                                             countStyle:<span class="built_in">NSByteCountFormatterCountStyleMemory</span>];</div><div class="line">        downloadTask.downloadModel.bytesWritten = totalBytesWritten;</div><div class="line">        downloadTask.downloadModel.speedString = speedString;</div><div class="line">        downloadTask.downloadModel.progress = progress;</div><div class="line">        downloadTask.downloadModel.currentSize = currentSize;</div><div class="line">        downloadTask.downloadModel.totalSize = totalSize;</div><div class="line">        downloadTask.downloadModel.date = currentDate;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask didFinishDownloadingToURL:(<span class="built_in">NSURL</span> *)location &#123;</div><div class="line">    <span class="built_in">NSURL</span> *documentsDirectoryURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">NO</span> error:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSURL</span> *filename = [documentsDirectoryURL URLByAppendingPathComponent:downloadTask.response.suggestedFilename];</div><div class="line">    [[<span class="built_in">NSFileManager</span> defaultManager] moveItemAtURL:location toURL:filename error:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"fileUrl : %@"</span>,filename.absoluteString);</div><div class="line">    downloadTask.downloadModel.localPath = filename.absoluteString;</div><div class="line">    downloadTask.downloadModel.state = ZEDownloadStateCompleted;</div><div class="line">    ZEDownloadOperation *operation = [<span class="keyword">self</span> findOperationInDownloadQueue:downloadTask.downloadModel];</div><div class="line">    [<span class="keyword">self</span> moveToCompleteArr:operation];</div><div class="line">    [<span class="keyword">self</span> nextDownload];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task didCompleteWithError:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error &#123;</div><div class="line">    <span class="comment">// code &lt; 0 是发生错误  -999 是task 被取消了  暂且如下处理</span></div><div class="line">    <span class="keyword">if</span> (error.code &lt; <span class="number">0</span> &amp;&amp; error.code != <span class="number">-999</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"发生错误"</span>);</div><div class="line">        task.downloadModel.resumeData = error.userInfo[<span class="built_in">NSURLSessionDownloadTaskResumeData</span>];</div><div class="line">        task.downloadModel.state = ZEDownloadStateFailed;</div><div class="line">        ZEDownloadOperation *operation = [<span class="keyword">self</span> findOperationInDownloadQueue:task.downloadModel];</div><div class="line">        [operation downloadFinished];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>更新数据为1秒更新一次，<em>*</em>项目中对NSURLSessionTask添加了category，方便获取数据模型；<br>error回调方法中，-999 是取消，以为在suspend方法中已经设置了model.state，并获取了resumeData数据，所以此处不做处理。</p><h3 id="ZEDownloadManager使用"><a href="#ZEDownloadManager使用" class="headerlink" title="ZEDownloadManager使用"></a>ZEDownloadManager使用</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"><span class="comment">//设置最大下载数</span></div><div class="line">    ZEDownloader.maxDownloadCount = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)download:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    <span class="built_in">NSInteger</span> index = sender.tag - <span class="number">100</span>;</div><div class="line">    ZEDownloadModel *model = <span class="keyword">self</span>.array[index];</div><div class="line">    [sender setBackgroundColor:[<span class="built_in">UIColor</span> lightGrayColor]];</div><div class="line">    <span class="keyword">if</span> ([ZEDownloader isExecuted:model]) &#123;</div><div class="line">        </div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"该资源正在下载"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    model.downloadNum = ZEDownloader.downloadArr.count;</div><div class="line">    [ZEDownloader addDownLoad:model];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>获取进度等数据</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView willDisplayCell:(<span class="built_in">UITableViewCell</span> *)cell forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    DownloadTableViewCell *displayCell = (DownloadTableViewCell *)cell;</div><div class="line">    ZEDownloadModel *model = ZEDownloader.downloadArr[indexPath.row];</div><div class="line">    [displayCell setModel:model];</div><div class="line">    </div><div class="line">    model.progressChanged = ^(ZEDownloadModel *model) &#123;</div><div class="line">        [displayCell setModel:model];</div><div class="line">    &#125;;</div><div class="line">    model.stateChanged = ^(ZEDownloadModel *model) &#123;</div><div class="line">        [displayCell setModel:model];</div><div class="line">        [tableView reloadData];</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="功能都已近实现，具体可以查看Demo-如果有错误的地方欢迎指出。"><a href="#功能都已近实现，具体可以查看Demo-如果有错误的地方欢迎指出。" class="headerlink" title="功能都已近实现，具体可以查看Demo,如果有错误的地方欢迎指出。"></a>功能都已近实现，具体可以查看<a href="https://github.com/ze230123/ZEDownload" target="_blank" rel="external">Demo</a>,如果有错误的地方欢迎指出。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;结构设计&quot;&gt;&lt;a href=&quot;#结构设计&quot; class=&quot;headerlink&quot; title=&quot;结构设计&quot;&gt;&lt;/a&gt;结构设计&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;ZEDownloadModel是下载任务的数据模型，下载任务的文件名、储存路径、下载进度、下载速度等。进度、状态
      
    
    </summary>
    
      <category term="OC" scheme="http://yoursite.com/categories/OC/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>NSURLSession使用</title>
    <link href="http://yoursite.com/2017/02/27/NSURLSession/"/>
    <id>http://yoursite.com/2017/02/27/NSURLSession/</id>
    <published>2017-02-27T12:00:00.000Z</published>
    <updated>2017-10-20T05:16:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用NSURLSession有两步：</p><ol><li>通过NSURLSession的实例创建Task；</li><li>执行task</li></ol><h2 id="NSURLSessionTask"><a href="#NSURLSessionTask" class="headerlink" title="NSURLSessionTask"></a>NSURLSessionTask</h2><p>NSURLSessionTask可以简单的理解为任务，如数据请求任务、上传任务、下载任务。</p><ul><li><strong>NSURLSessionTask</strong>     会话中任务的基类<ul><li><strong>NSURLSessionDataTask</strong>     数据请求任务<ul><li><strong>NSURLSessionUploadTask</strong>     上传任务</li></ul></li><li><strong>NSURLSessionDownloadTask</strong>  下载任务</li><li><strong>NSURLSessionStreamTask</strong>  用于建立TCP/IP连接的任务</li></ul></li></ul><h2 id="NSURLSessionDataTask"><a href="#NSURLSessionDataTask" class="headerlink" title="NSURLSessionDataTask"></a>NSURLSessionDataTask</h2><p>数据请求任务常用的为Get和Post请求。</p><ul><li>Get</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"你的URL"</span>];</div><div class="line"><span class="comment">// 获得共享的单例会话对象。</span></div><div class="line"><span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</div><div class="line"><span class="comment">// 创建任务</span></div><div class="line"><span class="built_in">NSURLSessionDataTask</span> *task = [session dataTaskWithURL:url</div><div class="line">                                    completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">                                        <span class="comment">// 解析返回的数据 data</span></div><div class="line">                                    &#125;];</div><div class="line"><span class="comment">// 启动任务</span></div><div class="line">[task resume];</div></pre></td></tr></table></figure><ul><li>Post</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//确定请求路径</span></div><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://120.25.226.186:32812/login"</span>];</div><div class="line"><span class="comment">//创建可变请求对象</span></div><div class="line"><span class="built_in">NSMutableURLRequest</span> *request = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:url];</div><div class="line"><span class="comment">//修改请求方法</span></div><div class="line">request.HTTPMethod = <span class="string">@"POST"</span>;</div><div class="line"><span class="comment">//设置请求体</span></div><div class="line">request.HTTPBody = [<span class="string">@"username=520&amp;pwd=520&amp;type=JSON"</span> dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line"><span class="comment">//创建会话对象</span></div><div class="line"><span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</div><div class="line"><span class="comment">//创建请求 Task</span></div><div class="line"><span class="built_in">NSURLSessionDataTask</span> *dataTask = [session dataTaskWithRequest:request</div><div class="line">                                            completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">                                                <span class="comment">// 解析返回的数据 data</span></div><div class="line">                                            &#125;];</div><div class="line"><span class="comment">//发送请求</span></div><div class="line">[dataTask resume];</div></pre></td></tr></table></figure><h2 id="NSURLSessionDownloadTask-简单下载"><a href="#NSURLSessionDownloadTask-简单下载" class="headerlink" title="NSURLSessionDownloadTask 简单下载"></a>NSURLSessionDownloadTask 简单下载</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//确定请求路径</span></div><div class="line"> <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://120.25.226.186:32812/resources/images/minion_02.png"</span>];</div><div class="line"> <span class="comment">//创建请求对象</span></div><div class="line"> <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</div><div class="line"> <span class="comment">//创建会话对象</span></div><div class="line"> <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</div><div class="line"> <span class="comment">//创建会话请求</span></div><div class="line"> <span class="comment">//优点：该方法内部已经完成了边接收数据边写沙盒的操作，解决了内存飙升的问题</span></div><div class="line"> <span class="built_in">NSURLSessionDownloadTask</span> *downTask = [session downloadTaskWithRequest:request </div><div class="line">     completionHandler:^(<span class="built_in">NSURL</span> * _Nullable location, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line"></div><div class="line">     <span class="comment">//默认存储到临时文件夹 tmp 中，需要剪切文件到 cache</span></div><div class="line">     <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, location);<span class="comment">//目标位置</span></div><div class="line">     <span class="built_in">NSString</span> *fullPath = [[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject]  </div><div class="line">                         stringByAppendingPathComponent:response.suggestedFilename];</div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line"><span class="comment">      fileURLWithPath:有协议头</span></div><div class="line"><span class="comment">      URLWithString:无协议头</span></div><div class="line"><span class="comment">      */</span></div><div class="line">     [[<span class="built_in">NSFileManager</span> defaultManager] moveItemAtURL:location toURL:[<span class="built_in">NSURL</span> fileURLWithPath:fullPath] error:<span class="literal">nil</span>];</div><div class="line"></div><div class="line"> &#125;];</div><div class="line"> <span class="comment">//发送请求</span></div><div class="line"> [downTask resume];</div></pre></td></tr></table></figure><p>以上方法无法监听下载进度，如要获取下载进度，可以使用代理的方式进行下载。</p><h2 id="NSURLSessionDownloadTask（断点续传）"><a href="#NSURLSessionDownloadTask（断点续传）" class="headerlink" title="NSURLSessionDownloadTask（断点续传）"></a>NSURLSessionDownloadTask（断点续传）</h2><ul><li>创建NSURLSession，设置代理</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSURLSession</span> *)session &#123;</div><div class="line">    <span class="keyword">if</span> (_session == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">        _session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:configuration</div><div class="line">                                                 delegate:<span class="keyword">self</span></div><div class="line">                                            delegateQueue:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _session;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>开始下载</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开始下载</span></div><div class="line">- (<span class="keyword">IBAction</span>)start:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.downloadTask) &#123;</div><div class="line">        <span class="keyword">self</span>.downloadTask = [<span class="keyword">self</span>.session downloadTaskWithURL:URL];</div><div class="line">        [<span class="keyword">self</span>.downloadTask resume];</div><div class="line">        <span class="keyword">self</span>.titleLabel.text = <span class="string">@"开始下载"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>暂停下载</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 暂停下载</span></div><div class="line">- (<span class="keyword">IBAction</span>)pause:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    [<span class="keyword">self</span>.downloadTask cancelByProducingResumeData:^(<span class="built_in">NSData</span> * _Nullable resumeData) &#123;</div><div class="line">        <span class="keyword">self</span>.resumeData = resumeData;</div><div class="line">        <span class="keyword">self</span>.downloadTask = <span class="literal">nil</span>;</div><div class="line">    &#125;];</div><div class="line">    <span class="keyword">self</span>.titleLabel.text = <span class="string">@"暂停下载"</span>;</div><div class="line">    <span class="keyword">self</span>.speedLabel.text = <span class="string">@"0KB/s"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>删除任务 (沙盒中的临时文件)</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)delete:(<span class="keyword">id</span>)sender &#123;</div><div class="line">    [<span class="keyword">self</span>.downloadTask cancelByProducingResumeData:^(<span class="built_in">NSData</span> * _Nullable resumeData) &#123;</div><div class="line">        <span class="comment">// 将resumeData 序列化</span></div><div class="line">        <span class="built_in">NSError</span> *listError = <span class="literal">nil</span>;</div><div class="line">        <span class="built_in">NSDictionary</span> *resumeDictionary = [<span class="built_in">NSPropertyListSerialization</span> propertyListWithData:resumeData options:<span class="built_in">NSPropertyListImmutable</span> format:<span class="literal">nil</span> error:&amp;listError];</div><div class="line">        <span class="keyword">if</span> (listError) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,listError.description);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 取得临时文件的名字</span></div><div class="line">        <span class="built_in">NSString</span> *fileName = [resumeDictionary objectForKey:<span class="string">@"NSURLSessionResumeInfoTempFileName"</span>];</div><div class="line">        <span class="comment">// 获取 tmp 临时文件夹  拼接临时文件名</span></div><div class="line">        <span class="built_in">NSString</span> *tmp = [<span class="built_in">NSTemporaryDirectory</span>() stringByAppendingString:fileName];</div><div class="line">        <span class="comment">// 删除临时文件</span></div><div class="line">        <span class="built_in">NSError</span> *fileError = <span class="literal">nil</span>;</div><div class="line">        [[<span class="built_in">NSFileManager</span> defaultManager] removeItemAtPath:tmp error:&amp;fileError];</div><div class="line">        <span class="keyword">if</span> (fileError) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,fileEyrror.description);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">self</span>.resumeData = <span class="literal">nil</span>;</div><div class="line">        <span class="keyword">self</span>.downloadTask = <span class="literal">nil</span>;</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.titleLabel.text = <span class="string">@"删除任务"</span>;</div><div class="line">    <span class="keyword">self</span>.progressView.progress = <span class="number">0</span>;</div><div class="line">    <span class="keyword">self</span>.progressLabel.text = <span class="string">@""</span>;</div><div class="line">    <span class="keyword">self</span>.speedLabel.text = <span class="string">@"0KB/s"</span>;</div><div class="line">    <span class="keyword">self</span>.sizeLabel.text = <span class="string">@"--/--"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>读取resumeData中临时文件的方法是在<a href="http://stackoverflow.com/questions/21895853/how-can-i-check-that-an-nsdata-blob-is-valid-as-resumedata-for-an-nsurlsessiondo?answertab=votes#tab-top" target="_blank" rel="external">Stack Overflow</a>找到的,实际上resumeData是一个plist文件</strong></p><ul><li>遵守NSURLSessionDelegate协议，实现协议方法</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下载完成</span></div><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</div><div class="line">      downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</div><div class="line">didFinishDownloadingToURL:(<span class="built_in">NSURL</span> *)location &#123;</div><div class="line">    <span class="comment">//获取Downloads文件夹</span></div><div class="line">    <span class="built_in">NSURL</span> *documentsDirectoryURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSDownloadsDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">YES</span> error:<span class="literal">nil</span>];</div><div class="line">    <span class="comment">//修改文件名</span></div><div class="line">    <span class="built_in">NSURL</span> *filename = [documentsDirectoryURL URLByAppendingPathComponent:downloadTask.response.suggestedFilename];</div><div class="line">    <span class="comment">// 剪切文件</span></div><div class="line">    [[<span class="built_in">NSFileManager</span> defaultManager] moveItemAtURL:location toURL:filename error:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,filename.path);</div><div class="line">    <span class="keyword">self</span>.downloadTask = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="keyword">self</span>.titleLabel.text = <span class="string">@"下载完成"</span>;</div><div class="line">        <span class="keyword">self</span>.speedLabel.text = <span class="string">@"0KB/s"</span>;</div><div class="line">        <span class="keyword">self</span>.pathLabel.text = filename.absoluteString;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//下载进度</span></div><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</div><div class="line">      downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</div><div class="line">      didWriteData:(int64_t)bytesWritten</div><div class="line"> totalBytesWritten:(int64_t)totalBytesWritten</div><div class="line">totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite &#123;</div><div class="line">    <span class="comment">//计算下载进度</span></div><div class="line">    <span class="keyword">double</span> progress = (<span class="keyword">double</span>)totalBytesWritten / totalBytesExpectedToWrite;</div><div class="line">    <span class="comment">//计算已经下载的大小</span></div><div class="line">    <span class="built_in">NSString</span> *currentSize = [<span class="built_in">NSByteCountFormatter</span> stringFromByteCount:totalBytesWritten</div><div class="line">                                                           countStyle:<span class="built_in">NSByteCountFormatterCountStyleMemory</span>];</div><div class="line">    <span class="comment">//计算总大小</span></div><div class="line">    <span class="built_in">NSString</span> *totalSize = [<span class="built_in">NSByteCountFormatter</span> stringFromByteCount:totalBytesExpectedToWrite</div><div class="line">                                                         countStyle:<span class="built_in">NSByteCountFormatterCountStyleMemory</span>];</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="keyword">self</span>.sizeLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/%@"</span>,currentSize,totalSize];</div><div class="line">        <span class="keyword">self</span>.progressView.progress = progress;</div><div class="line">        <span class="keyword">self</span>.progressLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%.1f%%"</span>,progress*<span class="number">100</span>];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 计算下载速度</span></div><div class="line">    <span class="built_in">NSDate</span> *currentDate = [<span class="built_in">NSDate</span> date];</div><div class="line">    <span class="built_in">NSTimeInterval</span> interval = [currentDate timeIntervalSinceDate:<span class="keyword">self</span>.date];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (interval &gt;= <span class="number">1</span> || totalBytesWritten == totalBytesExpectedToWrite) &#123;</div><div class="line"></div><div class="line">        <span class="built_in">NSString</span> *speedStr = [<span class="built_in">NSByteCountFormatter</span> stringFromByteCount:(totalBytesWritten - <span class="keyword">self</span>.totalBytesWritten)/interval</div><div class="line">                                                            countStyle:<span class="built_in">NSByteCountFormatterCountStyleMemory</span>];</div><div class="line">        <span class="built_in">NSString</span> *speedString = [speedStr stringByAppendingString:<span class="string">@"/s"</span>];</div><div class="line">        </div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            <span class="keyword">self</span>.speedLabel.text = speedString;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">self</span>.totalBytesWritten = totalBytesWritten;</div><div class="line">        <span class="keyword">self</span>.date = currentDate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://github.com/ze230123/Download" target="_blank" rel="external">断点续传的Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用NSURLSession有两步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过NSURLSession的实例创建Task；&lt;/li&gt;
&lt;li&gt;执行task&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;NSURLSessionTask&quot;&gt;&lt;a href=&quot;#NSURLSessionTask&quot;
      
    
    </summary>
    
      <category term="OC" scheme="http://yoursite.com/categories/OC/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>NSURLSessionConfiguration使用</title>
    <link href="http://yoursite.com/2017/02/26/NSURLSessionConfiguration/"/>
    <id>http://yoursite.com/2017/02/26/NSURLSessionConfiguration/</id>
    <published>2017-02-26T12:00:00.000Z</published>
    <updated>2017-10-20T05:15:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>作用：可以统一配置NSURLSession，如请求超时、缓存策略等；</p><h3 id="有三种创建方法"><a href="#有三种创建方法" class="headerlink" title="有三种创建方法"></a>有三种创建方法</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回标准配置，这实际上与NSURLConnection的网络协议栈是一样的，具有相同的共享NSHTTPCookieStorage，共享NSURLCache和共享NSURLCredentialStorage。</span></div><div class="line">+ (<span class="built_in">NSURLSessionConfiguration</span> *)defaultSessionConfiguration;</div><div class="line"><span class="comment">//返回一个预设配置，没有持久性存储的缓存，Cookie或证书。这对于实现像"秘密浏览"功能的功能来说，是很理想的。</span></div><div class="line">+ (<span class="built_in">NSURLSessionConfiguration</span> *)ephemeralSessionConfiguration;</div><div class="line"><span class="comment">//独特之处在于，它会创建一个后台会话。后台会话不同于常规的，普通的会话，它甚至可以在应用程序挂起，退出，</span></div><div class="line">  崩溃的情况下运行上传和下载任务。初始化时指定的标识符，被用于向任何可能在进程外恢复后台传输的守护进程提供上下文。</div><div class="line">+ (<span class="built_in">NSURLSessionConfiguration</span> *)backgroundSessionConfigurationWithIdentifier:(<span class="built_in">NSString</span> *)identifier     <span class="built_in">NS_AVAILABLE</span>(<span class="number">10</span>_10, <span class="number">8</span>_0);</div></pre></td></tr></table></figure><h3 id="重要的属性"><a href="#重要的属性" class="headerlink" title="重要的属性"></a>重要的属性</h3><ul><li><strong>HTTPAdditionalHeaders</strong></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 替代 request 中的 forHTTPHeaderField 告诉服务器有关客户端的附加信息</span></div><div class="line"><span class="string">"HTTPAdditionalHeaders"</span>指定了一组默认的可以设置出站请求的数据头。这对于跨会话共享信息，如内容类型，语言，用户代理，身份认证，是很有用的。</div><div class="line"></div><div class="line"><span class="meta"># WebDav的身份验证</span></div><div class="line"><span class="built_in">NSString</span> *userPasswordString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@:%@"</span>, user, password];</div><div class="line"><span class="built_in">NSData</span> * userPasswordData = [userPasswordString dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line"><span class="built_in">NSString</span> *base64EncodedCredential = [userPasswordData base64EncodedStringWithOptions:<span class="number">0</span>];</div><div class="line"><span class="built_in">NSString</span> *authString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"Basic: %@"</span>, base64EncodedCredential];</div><div class="line"></div><div class="line"><span class="meta"># 设置客户端类型</span></div><div class="line"></div><div class="line"><span class="built_in">NSString</span> *userAgentString = <span class="string">@"iPhone AppleWebKit"</span>;</div><div class="line"></div><div class="line">configuration.HTTPAdditionalHeaders = @&#123;<span class="string">@"Accept"</span>: <span class="string">@"application/json"</span>,</div><div class="line">                                        <span class="string">@"Accept-Language"</span>: <span class="string">@"en"</span>,</div><div class="line">                                        <span class="string">@"Authorization"</span>: authString,</div><div class="line">                                        <span class="string">@"User-Agent"</span>: userAgentString&#125;;</div></pre></td></tr></table></figure><ul><li><p><strong>networkServiceType（网络服务类型）</strong>：<br>对标准的网络流量，网络电话，语音，视频，以及由一个后台进程使用的流量进行了区分。大多数应用程序都不需要设置这个</p></li><li><p><strong>allowsCellularAccess（允许蜂窝访问）</strong>和<strong>discretionary（自行决定）</strong>：被用于节省通过蜂窝连接的带宽。建议在使用后台传输的时候，使用discretionary属性，而不是allowsCellularAccess属性，因为它会把WiFi和电源可用性考虑在内</p></li><li><p><strong>timeoutIntervalForRequest</strong>和<strong>timeoutIntervalForResource</strong>：指定了请求以及该资源的超时时间间隔。许多开发人员试图使用timeoutInterval去限制发送请求的总时间，但这误会了timeoutInterval的意思：报文之间的时间。timeoutIntervalForResource实际上提供了整体超时的特性，这应该只用于后台传输，而不是用户实际上可能想要等待的任何东西</p></li><li><p><strong>HTTPMaximumConnectionsPerHost</strong>是 Foundation 框架中URL加载系统的一个新的配置选项。它曾经被用于NSURLConnection管理私人连接池。现在有了NSURLSession，开发者可以在需要时限制连接到特定主机的数量</p></li><li><p><strong>HTTPShouldUsePipelining</strong> 也出现在NSMutableURLRequest，它可以被用于开启HTTP管道，这可以显着降低请求的加载时间，但是由于没有被服务器广泛支持，默认是禁用的</p></li><li><p><strong>sessionSendsLaunchEvents</strong> 是另一个新的属性，该属性指定该会话是否应该从后台启动</p></li><li><p><strong>connectionProxyDictionary</strong> 指定了会话连接中的代理服务器。同样地，大多数面向消费者的应用程序都不需要代理，所以基本上不需要配置这个属性。<br>关于连接代理的更多信息可以在 CFProxySupport Reference 找到。</p></li><li><p><strong>Cookie Policies</strong></p><ul><li><strong>HTTPCookieStorage</strong> 是被会话使用的cookie存储。默认情况下，NSHTTPCookieShorage的 + sharedHTTPCookieStorage会被使用，这与NSURLConnection是相同的</li><li><strong>HTTPCookieAcceptPolicy</strong> 决定了该会话应该接受从服务器发出的cookie的条件</li><li><strong>HTTPShouldSetCookies</strong> 指定了请求是否应该使用会话HTTPCookieStorage的cookie</li></ul></li><li><p><strong>Caching Policies</strong></p><ul><li><strong>URLCache</strong> 是会话使用的缓存。默认情况下，NSURLCache 的 + sharedURLCache 会被使用，这与NSURLConnection是相同的</li><li><strong>requestCachePolicy</strong> 指定了一个请求的缓存响应应该在什么时候返回。这相当于NSURLRequest 的-cachePolicy方法</li></ul></li><li><p><strong>Custom Protocols</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作用：可以统一配置NSURLSession，如请求超时、缓存策略等；&lt;/p&gt;
&lt;h3 id=&quot;有三种创建方法&quot;&gt;&lt;a href=&quot;#有三种创建方法&quot; class=&quot;headerlink&quot; title=&quot;有三种创建方法&quot;&gt;&lt;/a&gt;有三种创建方法&lt;/h3&gt;&lt;figure cla
      
    
    </summary>
    
      <category term="OC" scheme="http://yoursite.com/categories/OC/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>iOS CoreText计算每页显示的字数的方法</title>
    <link href="http://yoursite.com/2017/02/25/CoreText_PageStringCount/"/>
    <id>http://yoursite.com/2017/02/25/CoreText_PageStringCount/</id>
    <published>2017-02-25T12:00:00.000Z</published>
    <updated>2017-10-20T05:20:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做小说阅读器时，每章节的内容有很多文字，如果我们直接把章节的内容显示出来用户体验肯定不好，为此需要我们把章节内容分成几页去显示，每页的文字正好铺满我们设定的区域。<br>下面的代码是用CoreText做的分页计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    NSMutableAttributedString *str = [[NSMutableAttributedString alloc]initWithString:_contentText];</div><div class="line">    [str addAttributes:[self attributesWithFont:_contentFont] range:NSMakeRange(0, str.length)];</div><div class="line">    </div><div class="line">    CFAttributedStringRef cfAttStr = (__bridge CFAttributedStringRef)str;</div><div class="line">    CTFramesetterRef framesetter = CTFramesetterCreateWithAttributedString(cfAttStr);</div><div class="line">    int textPos = 0;</div><div class="line">    NSInteger totalPage = 0;</div><div class="line">    NSUInteger strLength = [str length];</div><div class="line">    while (textPos &lt; strLength)  &#123;</div><div class="line">        //设置路径</div><div class="line">        CGPathRef path = CGPathCreateWithRect(CGRectMake(0, 0, _textRenderSize.width, _textRenderSize.height), NULL);</div><div class="line">        //生成frame</div><div class="line">        CTFrameRef frame = CTFramesetterCreateFrame(framesetter, CFRangeMake(textPos, 0), path, NULL);</div><div class="line">//获取范围并转换为NSRange</div><div class="line">        CFRange frameRange = CTFrameGetVisibleStringRange(frame);</div><div class="line">        NSRange range = NSMakeRange(frameRange.location, frameRange.length);</div><div class="line">        //以NSString形式保存</div><div class="line">        [array addObject:NSStringFromRange(range)];</div><div class="line">        //移动当前文本位置</div><div class="line">        textPos += frameRange.length;</div><div class="line">        CFRelease(frame);</div><div class="line">        CGPathRelease(path);</div><div class="line">        totalPage++;</div><div class="line">        //释放路径和frame，页数加1</div><div class="line">    &#125;</div><div class="line">    CFRelease(framesetter);</div></pre></td></tr></table></figure><blockquote><p>代码中只设置了文本的字号。</p></blockquote><p><a href="https://github.com/ze230123/FreeNovel" target="_blank" rel="external">简易小说阅读器</a>这是我没事的时候写的，当然还没写完，如果你有兴趣也可以加入进来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在做小说阅读器时，每章节的内容有很多文字，如果我们直接把章节的内容显示出来用户体验肯定不好，为此需要我们把章节内容分成几页去显示，每页的文字正好铺满我们设定的区域。&lt;br&gt;下面的代码是用CoreText做的分页计算：&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="OC" scheme="http://yoursite.com/categories/OC/"/>
    
    
      <category term="常用代码" scheme="http://yoursite.com/tags/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins + xcode +Fir.im 自动构建项目 、打包ipa并上传</title>
    <link href="http://yoursite.com/2017/02/15/Jenkins_xcode%20_Fir.im/"/>
    <id>http://yoursite.com/2017/02/15/Jenkins_xcode _Fir.im/</id>
    <published>2017-02-15T12:00:00.000Z</published>
    <updated>2017-10-20T05:25:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装jenkins-（命令行安装）"><a href="#安装jenkins-（命令行安装）" class="headerlink" title="安装jenkins （命令行安装）"></a>安装jenkins （命令行安装）</h2><ul><li>安装jenkins(需安装homebrew)</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install jenkins</div></pre></td></tr></table></figure><ul><li>启动jenkins</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jenkins</div></pre></td></tr></table></figure><ul><li>卸载jenkins</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew uninstall jenkins</div></pre></td></tr></table></figure><p>启动jenkins后使用浏览器访问jenkins <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul><li>首先确保安装了 OS X command line tools ,终端运行命令</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcode-select - -install</div></pre></td></tr></table></figure><ul><li>使用Homebrew 及 RVM 安装Ruby，在安装 fir-cli</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Install <span class="symbol">Homebrew:</span></div><div class="line"></div><div class="line">ruby -e<span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></div><div class="line"></div><div class="line">install <span class="symbol">RVM:</span></div><div class="line"></div><div class="line">\curl -sSL <span class="symbol">https:</span>/<span class="regexp">/get.rvm.io|bash -s stable --ruby</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">gem install fir-cli</span></div></pre></td></tr></table></figure><p><strong><em>具体安装参考 <a href="https://github.com/FIRHQ/fir-cli/blob/master/README.md" target="_blank" rel="external">官方工具 fir-cli 使用说明</a></em></strong></p><h2 id="创建一个新的项目"><a href="#创建一个新的项目" class="headerlink" title="创建一个新的项目"></a>创建一个新的项目</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="项目基本信息"><a href="#项目基本信息" class="headerlink" title="项目基本信息"></a>项目基本信息</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h2><p>源码管理中选择Git，配置仓库地址，认证账户，需要构建的分支等。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="配置构建过程"><a href="#配置构建过程" class="headerlink" title="配置构建过程"></a>配置构建过程</h2><p>因为我的项目使用cocoapods进行依赖管理，故现增加一个Shell脚本的构建步骤。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="配置Xcode-integration"><a href="#配置Xcode-integration" class="headerlink" title="配置Xcode integration"></a>配置Xcode integration</h2><h3 id="新增Xcode-integration-构建过程"><a href="#新增Xcode-integration-构建过程" class="headerlink" title="新增Xcode integration 构建过程"></a>新增Xcode integration 构建过程</h3><p>基础配置<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ol><li>target在本文的配置中可以不添</li><li>clean before build  勾选Yes</li><li>Configuration 实在Xcode中的配置，默认有Debug和Release，这里的AdHoc是我自己在项目中添加的配置。</li><li>这里设置 .ipa 文件的名称。其中 ${JOB_NAME} 为本项目Job的名字，${BUILD_ID}为本次构建的版本号。</li><li>这里设置构建过程输出目录。其中 ${WORKSPACE} 为jenkins 提供的系统变量，为构建根目录。</li></ol><h2 id="代码签名及密匙配置"><a href="#代码签名及密匙配置" class="headerlink" title="代码签名及密匙配置"></a>代码签名及密匙配置</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>本文采用在Xcode 项目中 共享scheme 的方式，在 scheme 内部对代码签名和 Profile 做好了配置，同时 jenkins 所在的 Mac OSX 中有对应的证书和Profile，所以 1 中不需要做特殊配置，如果配置，将替换scheme中的配置。</li><li>在打包过程中，命令会由于系统的安全设置提醒输入密码，2中可以设置密匙所在路径及系统用户密码。</li><li>Keychain path ：${HOME}/Library/Keychains/login.keychain  为系统登录密匙路径。</li><li>Keychain password ： 填入电脑的用户密码。</li></ol><p><strong><em>【注】：Xcode中共享 scheme 的 方法 后边会说到。</em></strong></p><h2 id="Xcode高级构建配置"><a href="#Xcode高级构建配置" class="headerlink" title="Xcode高级构建配置"></a>Xcode高级构建配置</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>这里的Project就是我在Xcode项目中共享的scheme。</li><li>本文中的项目中包含有workspace，这里设置对应路径，不需要带上 .xcworkspace后缀。</li><li>Xcode项目所在目录。</li><li>Xcode项目文件路径，这里需要带上 .xcodeproj 后缀。</li><li>设置构建输出目录。</li></ol><h2 id="发布到fir-im"><a href="#发布到fir-im" class="headerlink" title="发布到fir.im"></a>发布到fir.im</h2><p>新增一个 构建后操作步骤<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ul><li>这里添加 fir.im Token  从自己的fir.im账号里获取 </li></ul><h2 id="启动构建"><a href="#启动构建" class="headerlink" title="启动构建"></a>启动构建</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>到这里自动构建就完成了</p><h2 id="下面来说下共享Xcode项目中scheme"><a href="#下面来说下共享Xcode项目中scheme" class="headerlink" title="下面来说下共享Xcode项目中scheme"></a>下面来说下共享Xcode项目中scheme</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/2017/02/14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>“+” 可以新建scheme </li><li>将共享后的scheme 纳入版本管理后，就可以用按上边的步骤配置好的jenkins 来自动构建了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装jenkins-（命令行安装）&quot;&gt;&lt;a href=&quot;#安装jenkins-（命令行安装）&quot; class=&quot;headerlink&quot; title=&quot;安装jenkins （命令行安装）&quot;&gt;&lt;/a&gt;安装jenkins （命令行安装）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装je
      
    
    </summary>
    
      <category term="Xcode" scheme="http://yoursite.com/categories/Xcode/"/>
    
    
      <category term="CI" scheme="http://yoursite.com/tags/CI/"/>
    
  </entry>
  
</feed>
